scn DLpndPowerSlideHandler

; Once the slide can start we apply properties to the slide
begin function {}
  ; Block slide chaining and start the Custom Crouch Animation
  Player.AuxVarSetFLT "*_iDLpndSlideStarted" 1
  ; Push the Player forward
  Player.PushActorNoRagdoll (Player.AuxVarGetFLT "*SlidePower") (Player.GetAngle z)
  ; Damage AP when sliding
  Player.DamageActorValue ActionPoints (((Player.AuxVarGetFLT "*SlideDamageAP") / 100) * (Player.GetPermAV ActionPoints))
  ; Create a blank array to hold all the knocked over actors
  array_var aAlreadyPushed = Ar_Construct "array"

  ; Check unique formid of all actors we touch while sliding
  CallForSeconds (Player.AuxVarGetFLT "*KnockOverTime") (begin function {}
    array_var aContactedRefs = Player.GetContactRefs
    if eval (Ar_Size aContactedRefs) > 0
      forEach array_var aIndex <- aContactedRefs
        ref rRef = aIndex["value"]
        ; We only want actors, and actors we didn't already apply the knock over force to
        if eval (rRef.IsActor && ((Ar_Find rRef aAlreadyPushed) == Ar_BadNumericIndex))
          DispatchEventAlt "DLpndPowerSlideFormHandler" rRef
          ; We add the actor ref to the list of pushed, incase we keep touching them on the next frame, so we don't apply force again
          Ar_Append aAlreadyPushed rRef
        endif
      loop
    endif
  end)

  CallAfterSeconds (Player.AuxVarGetFLT "*SlideDelay") (begin function {}
    ; Cooldown over, reset the slide
    Player.AuxVarSetFLT "*_iDLpndSlideStarted" 0
    if eval (Player.IsSneaking && (Player.AuxVarGetFLT "*SlideEndStand"))
      TapKey (Player.AuxVarGetFLT "*SlideKey")
    endif
  end)
end
